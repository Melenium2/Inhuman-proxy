// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ProxyStorage is an autogenerated mock type for the ProxyStorage type
type ProxyStorage struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, code
func (_m *ProxyStorage) Get(ctx context.Context, code string) (map[string]string, error) {
	ret := _m.Called(ctx, code)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(context.Context, string) map[string]string); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRandom provides a mock function with given fields: ctx
func (_m *ProxyStorage) GetRandom(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: ctx, code, proxy
func (_m *ProxyStorage) Set(ctx context.Context, code string, proxy string) error {
	ret := _m.Called(ctx, code, proxy)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, code, proxy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
